/**
  ******************************************************************************
  * @file    stm32f3xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  *
  * COPYRIGHT(c) 2020 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f3xx_hal.h"
#include "stm32f3xx.h"
#include "stm32f3xx_it.h"

/* USER CODE BEGIN 0 */
#include "Encoder.h"
#include "MCP4921.h"

volatile unsigned char ECD1_direction = ECD_Direction_StandBy;
volatile signed int ECD1_counts = 0;
volatile unsigned char  ECD2_direction = ECD_Direction_StandBy;
volatile signed int ECD2_counts = 0;
volatile unsigned char ECD3_direction = ECD_Direction_StandBy;
volatile signed int ECD3_counts = 0;
volatile unsigned long Debounce_EXTI_ECD1 =0;
volatile unsigned long Debounce_EXTI_ECD2 =0;
volatile unsigned long Debounce_EXTI_ECD3 =0;
/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern SPI_HandleTypeDef hspi3;

/******************************************************************************/
/*            Cortex-M4 Processor Interruption and Exception Handlers         */
/******************************************************************************/

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F3xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

    /* EXTI_11_IRQn 0 */ 
    
    if(__HAL_GPIO_EXTI_GET_IT(ECD2_A_Pin) != RESET) 
    {   

        if(((HAL_GPIO_ReadPin(ECD2_B_GPIO_Port, ECD2_B_Pin))== GPIO_PIN_RESET)&&(ECD2_direction == ECD_Direction_StandBy)) // daca ECD3_B este 1L 5V numaram +1
        {
          ECD2_direction = ECD_Clockwise_Direction;
          ECD2_counts++;           
        }
        else if(((HAL_GPIO_ReadPin(ECD2_B_GPIO_Port, ECD2_B_Pin))== GPIO_PIN_SET)&&(ECD2_direction == ECD_Direction_StandBy))//// altfel ECD1_B este 0L 0Veste numaram -1
        {
          ECD2_direction = ECD_Counter_Clockwise_Direction;
          ECD2_counts--;
        }
        else{}
        
        if(((HAL_GPIO_ReadPin(ECD2_A_GPIO_Port, ECD2_A_Pin))== GPIO_PIN_SET)&&
           ((HAL_GPIO_ReadPin(ECD2_B_GPIO_Port, ECD2_B_Pin))== GPIO_PIN_SET))
        {
          __HAL_GPIO_EXTI_CLEAR_IT(ECD2_A_Pin);
          HAL_GPIO_EXTI_Callback(ECD2_A_Pin);
        }

    }   /* EXTI_10_IRQn 0 */  

/*  ENCODER 3 count with debounce START*/

    if(__HAL_GPIO_EXTI_GET_IT(ECD3_A_Pin) != RESET) 
    {   

        if(((HAL_GPIO_ReadPin(ECD3_B_GPIO_Port, ECD3_B_Pin))== GPIO_PIN_RESET)&&(ECD3_direction == ECD_Direction_StandBy)) // daca ECD3_B este 1L 5V numaram +1
        {
          ECD3_direction = ECD_Clockwise_Direction;
          ECD3_counts++;           
        }
        else if(((HAL_GPIO_ReadPin(ECD3_B_GPIO_Port, ECD3_B_Pin))== GPIO_PIN_SET)&&(ECD3_direction == ECD_Direction_StandBy))//// altfel ECD1_B este 0L 0Veste numaram -1
        {
          ECD3_direction = ECD_Counter_Clockwise_Direction;
          ECD3_counts--;
        }
        else{}
        
        if(((HAL_GPIO_ReadPin(ECD3_A_GPIO_Port, ECD3_A_Pin))== GPIO_PIN_SET)&&
           ((HAL_GPIO_ReadPin(ECD3_B_GPIO_Port, ECD3_B_Pin))== GPIO_PIN_SET))
        { 
          __HAL_GPIO_EXTI_CLEAR_IT(ECD3_A_Pin);        
          HAL_GPIO_EXTI_Callback(ECD3_A_Pin);
        }

    }   /* EXTI_10_IRQn 0 */  
    
    /*  ENCODER 3 count with debounce END*/

//    if(__HAL_GPIO_EXTI_GET_IT(ECD3_A_Pin) != RESET) 
//    {
//
//        if((HAL_GPIO_ReadPin(ECD3_B_GPIO_Port, ECD3_B_Pin))==GPIO_PIN_RESET) // daca ECD1_B este 1L 5V numaram +1
//        {
//          ECD3_direction = ECD_Clockwise_Direction;
//          ECD3_counts++;
//        }
//        else //// altfel ECD1_B este 0L 0Veste numaram -1
//        {
//          ECD3_direction = ECD_Counter_Clockwise_Direction;
//          ECD3_counts--;
//        }     
//    __HAL_GPIO_EXTI_CLEAR_IT(ECD3_A_Pin);
//    HAL_GPIO_EXTI_Callback(ECD3_A_Pin);
//
//    } 
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}

/**
* @brief This function handles SPI3 global interrupt.
*/
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
  /* USER CODE BEGIN SPI3_IRQn 1 */
  if(SPI_TX_DAC1_Ongoing==1)
  {
  HAL_GPIO_WritePin(DAC1_CS_GPIO_Port,DAC1_CS_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(DAC1_LDAC_GPIO_Port,DAC1_LDAC_Pin,GPIO_PIN_RESET);
  HAL_GPIO_WritePin(DAC1_LDAC_GPIO_Port,DAC1_LDAC_Pin,GPIO_PIN_SET);

  SPI_TX_DAC1_Ongoing=0;
  SPI_IT_DAC1_Counter++;
  } 
  else
  {
    HAL_GPIO_WritePin(DAC1_CS_GPIO_Port,DAC1_CS_Pin,GPIO_PIN_RESET);
  }
   if(SPI_TX_DAC2_Ongoing==1)
 {
  HAL_GPIO_WritePin(DAC2_CS_GPIO_Port,DAC2_CS_Pin ,GPIO_PIN_SET);
  HAL_GPIO_WritePin(DAC2_LDAC_GPIO_Port,DAC2_LDAC_Pin,GPIO_PIN_RESET);
  HAL_GPIO_WritePin(DAC2_LDAC_GPIO_Port,DAC2_LDAC_Pin,GPIO_PIN_SET);
  SPI_TX_DAC2_Ongoing=0;
  SPI_IT_DAC2_Counter++;
 }
 else 
  {
  HAL_GPIO_WritePin(DAC2_CS_GPIO_Port,DAC2_CS_Pin ,GPIO_PIN_RESET); 
  }
  /* USER CODE END SPI3_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
